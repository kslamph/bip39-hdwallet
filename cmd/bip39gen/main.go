package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"
)

const wordlistTemplate = `// Code generated by bip39gen; DO NOT EDIT.
package bip39

// Wordlist is the BIP39 English wordlist
var Wordlist = []string{
{{range $index, $word := .Words}}	"{{$word}}",
{{end}}}

// Wordmap is a map of words to their indices
var Wordmap = map[string]int{
{{range $index, $word := .Words}}	"{{$word}}": {{$index}},
{{end}}}
`

type wordlistData struct {
	Words []string
}

func main() {
	if len(os.Args) < 3 {
		log.Fatal("Usage: bip39gen <input-file> <output-file>")
	}

	inputFile := os.Args[1]
	outputFile := os.Args[2]

	file, err := os.Open(inputFile)
	if err != nil {
		log.Fatalf("Failed to open input file: %v", err)
	}
	defer file.Close()

	var words []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" {
			words = append(words, line)
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatalf("Failed to read input file: %v", err)
	}

	// Validate we have 2048 words
	if len(words) != 2048 {
		log.Fatalf("Expected 2048 words, got %d", len(words))
	}

	tmpl, err := template.New("wordlist").Parse(wordlistTemplate)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	output, err := os.Create(outputFile)
	if err != nil {
		log.Fatalf("Failed to create output file: %v", err)
	}
	defer output.Close()

	data := wordlistData{Words: words}
	if err := tmpl.Execute(output, data); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	fmt.Printf("Successfully generated %s with %d words\n", outputFile, len(words))
}